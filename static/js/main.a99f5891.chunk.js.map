{"version":3,"sources":["components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","e","setState","searchField","target","value","console","log","state","fetch","then","response","json","users","this","fiteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAY,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,aACpC,OACA,uBACAC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCNDI,G,YAAO,SAAAC,GAAK,OACrB,sBAAKJ,UAAU,iBAAf,UACI,qBACIK,IAAI,UACJC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BAEP,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,aCNbC,EAAW,SAAAP,GAEpB,OAAO,qBAAKJ,UAAU,YAAf,SACFI,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAwBA,QAASA,GAArBA,EAAQC,UCqCjBM,E,kDAvCb,aAAc,IAAD,8BACX,gBAcFf,aAAe,SAACgB,GAEZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,QAAQ,kBAC7CC,QAAQC,IAAI,EAAKC,WAhBnB,EAAKA,MAAQ,CACXV,SAAU,GACVK,YAAY,IAJH,E,qDAQb,WAAoB,IAAD,OACjBM,MAAM,8CACLC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAC,SAAYW,S,oBAW5C,WAAQ,MAE0BC,KAAKN,MAA9BV,EAFD,EAECA,SAAUK,EAFX,EAEWA,YACXY,EAAkBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC7CA,EAAQE,KAAKsB,cAAcC,SAASf,EAAYc,kBAGnD,OAAO,sBAAK/B,UAAU,MAAf,UACP,iDACC,cAAC,EAAD,CACEF,YAAY,eACZC,aAAc6B,KAAK7B,eAElB,cAAC,EAAD,CAAUa,SAAUiB,W,GApCTI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a99f5891.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({placeholder, handleChange}) =>{\n    return  (\n    <input \n    className=\"search\"\n    type=\"search\" \n    placeholder={placeholder}\n    onChange={handleChange}\n    />\n    );\n}\n","import React from \"react\";\nimport \"./card.styles.css\";\n\nexport const Card = props => (\n    <div className=\"card-container\">\n        <img\n            alt=\"monster\"  \n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n        />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n);","import React from \"react\";\nimport \"./card-list.styles.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = props => {\n    // console.log(props);\n    return <div className=\"card-list\">\n        {props.monsters.map(monster => (\n            <Card key ={monster.id} monster={monster} />\n        ))}\n    </div>;\n}","import React, {Component} from 'react';\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { CardList } from './components/card-list/card-list.component';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField:\"\"\n    }\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then( response => response.json())\n    .then(users => this.setState({\"monsters\": users}))\n  }\n\n  //arrow functions have lexical scope. context. when constructor runs, it binds this function\n  handleChange = (e) =>{\n      //set state is async. so in order to wait for it before we print out\n      this.setState({searchField: e.target.value}, () =>\n      console.log(this.state)\n      )\n  }\n\n  render(){\n    //destructuring\n    const {monsters, searchField} = this.state;\n    const fiteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    \n   return <div className=\"App\">\n   <h1>Monster Rolodex</h1>\n    <SearchBox \n      placeholder=\"find monster\"\n      handleChange={this.handleChange}\n    />\n      {<CardList monsters={fiteredMonsters}/>}\n    </div>\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}